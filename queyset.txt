Microsoft Windows [Version 10.0.19042.1288]
(c) Microsoft Corporation. All rights reserved.

(venv) C:\mypython>python manage.py shell
Python 3.9.7 (tags/v3.9.7:1016ef3, Aug 30 2021, 20:19:38) [MSC v.1929 64 bit (AMD64)] on win32
Type "help", "copyright", "credits" or "license" for more information.
(InteractiveConsole)
>>> from blog.models import Post
>>> Post.objects.all()
<QuerySet [<Post: 장고프레임워크 (1) >, <Post: Django 역사 (2) >, <Post: 파이썬 (3) >]>

>>> from django.contrib.auth.models import User
>>> User.objects.all()
<QuerySet [<User: admin>]>
>>> User.objects.get(username='admin')
<User: admin>

>>> Post.objects.get(title='파이썬')
<Post: 파이썬 (3) >
>>> me = User.objects.get(username='admin')
>>> me
<User: admin>
>>> type(me)
<class 'django.contrib.auth.models.User'>
>>> me.username
'admin'
>>> me.email
'aa@aa.com'
>>> me.password
'pbkdf2_sha256$216000$kR4q93AHCi6z$RVDAeOCNpEtlR+zR63M+3cbr+o4cX7V8kCwSLFZthcM='

>>> Post.objects.create(author=me, title='sample title', text='sample text')
<Post: sample title (4) >
>>> Post.objects.all()
<QuerySet [<Post: 장고프레임워크 (1) >, <Post: Django 역사 (2) >, <Post: 파이썬 (3) >, <Post: sample title (4) >]>

>>> Post.objects.filter(title__contains='title')
<QuerySet [<Post: sample title (4) >]>
>>> post1 = Post.objects.filter(title__contains='title')
>>> type(post1)
<class 'django.db.models.query.QuerySet'>

>>> post2 = Post.objects.get(title='파이썬')
>>> type(post2)
<class 'blog.models.Post'>
>>> post1
<QuerySet [<Post: sample title (4) >]>
>>> post2
<Post: 파이썬 (3) >
>>> posts = Post.objects.all()
>>> posts
<QuerySet [<Post: 장고프레임워크 (1) >, <Post: Django 역사 (2) >, <Post: 파이썬 (3) >, <Post: sample title (4) >]>
>>> for post in posts:
...     print(post)
...
장고프레임워크 (1)
Django 역사 (2)
파이썬 (3)
sample title (4)

>>> for post in posts:
...     print(post.pk, post.created_date, post.title)
...
1 2021-11-22 04:57:08+00:00 장고프레임워크
2 2021-11-22 04:58:09+00:00 Django 역사
3 2021-11-22 04:59:12+00:00 파이썬
4 2021-11-22 06:57:44.689898+00:00 sample title

>>> from django.utils import timezone
>>> timezone.now()
datetime.datetime(2021, 11, 22, 7, 16, 6, 208169, tzinfo=<UTC>)

>>> Post.objects.filter(published_date__lte=timezone.now())
<QuerySet [<Post: Django 역사 (2) >, <Post: 파이썬 (3) >]>
>>> for post in posts:
...     print(post.title, post.published_date)
...
장고프레임워크 None
Django 역사 2021-11-22 04:58:47+00:00
파이썬 2021-11-22 04:59:28+00:00
sample title None

>>> for post in posts:
...     print(post.pk, post.title, post.published_date)
...
1 장고프레임워크 None
2 Django 역사 2021-11-22 04:58:47+00:00
3 파이썬 2021-11-22 04:59:28+00:00
4 sample title None

>>> post1 = Post.objects.get(pk=1)
>>> post1.title
'장고프레임워크'
>>> post1.published_date
>>> print(post1.published_date)
None
>>> post1.publish()
>>> print(post1.published_date)
2021-11-22 07:21:48.967241+00:00

>>> Post.objects.filter(published_date__lte=timezone.now())
<QuerySet [<Post: 장고프레임워크 (1) >, <Post: Django 역사 (2) >, <Post: 파이썬 (3) >]>
>>> Post.objects.filter(published_date__lte=timezone.now()).order_by('published_date')
<QuerySet [<Post: Django 역사 (2) >, <Post: 파이썬 (3) >, <Post: 장고프레임워크 (1) >]>
>>> Post.objects.filter(published_date__lte=timezone.now()).order_by('-published_date')
<QuerySet [<Post: 장고프레임워크 (1) >, <Post: 파이썬 (3) >, <Post: Django 역사 (2) >]>

>>> from django.shortcuts import get_object_or_404
>>> get_object_or_404(Post,pk=1)
<Post: 장고프레임워크 (1) >
>>> type(get_object_or_404(Post,pk=1))
<class 'blog.models.Post'>

>>> delpost = Post.objects.get(title='sample title')
>>> delpost = get_object_or_404(Post,pk=4)
>>> delpost
<Post: sample title (4) >
>>> delpost.delete()
(1, {'blog.Post': 1})
>>> Post.objects.all()
<QuerySet [<Post: 장고프레임워크 (1) >, <Post: Django 역사 (2) >, <Post: 파이썬 (3) >]>
--------------Comment 추가--------------
(venv) C:\mypython>python manage.py shell
Python 3.9.7 (tags/v3.9.7:1016ef3, Aug 30 2021, 20:19:38) [MSC v.1929 64 bit (AMD64)] on win32
Type "help", "copyright", "credits" or "license" for more information.
(InteractiveConsole)
>>> from blog.models import Post,Comment
>>> posts = Post.objects.all()
>>> type(posts)
<class 'django.db.models.query.QuerySet'>
>>> for post in posts:
...     print(post.id,post.pk,post.title)
...
1 1 장고프레임워크
2 2 Django 역사
3 3 파이썬
>>> Comment.objects.all()
<QuerySet [<Comment: 장고 프레임워크 룰이 많아요 (1)>]>
>>> comments = Comment.objects.all()
>>> for com in comments:
...     print(com.text, com.author)
...
장고 프레임워크 룰이 많아요 둘리
>>> post1 = Post.objects.get(id=1)
>>> post1
<Post: 장고프레임워크 (1) >
>>> post1.comments.all()
<QuerySet [<Comment: 장고 프레임워크 룰이 많아요 (1)>]>
>>> for comm in post1.comments.all():
...     print(comm.id, comm.author, comm.text, comm.post)
...
1 둘리 장고 프레임워크 룰이 많아요 장고프레임워크 (1)
>>> for comm in post1.comments.all():
...     print(comm.id, comm.author, comm.text, comm.post.id)
...
1 둘리 장고 프레임워크 룰이 많아요 1
>>> post1 = Post.objects.get(id=1)
>>> post1.comments.count()
2
>>> for comm in post1.comments.all():
...     print(comm.pk, comm.approved_comment)
...
1 False
2 True

>>> for comm in post1.comments.all():
...     comm.approve()

>>> for com in Comment.objects.all():
...     print(com.pk, com.approved_comment)
...
1 True
2 True

--------------Pagination--------------
Python 3.9.7 (tags/v3.9.7:1016ef3, Aug 30 2021, 20:19:38) [MSC v.1929 64 bit (AMD64)] on win32
Type "help", "copyright", "credits" or "license" for more information.
(InteractiveConsole)
>>> from django.core.paginator import Paginator
>>> objects = ['java','boot','jpa','python','django']
>>> objects
['java', 'boot', 'jpa', 'python', 'django']
>>> p = Paginator(objects,2)
>>> p.count
5
>>> p.num_pages
3
>>> p.page_range
range(1, 4)
>>> for val in p.page_range:
...     print(val)
...
1
2
3
>>> page1 = p.page(1)
>>> type(page1)
<class 'django.core.paginator.Page'>
>>> page1.object_list
['java', 'boot']
>>> page1.has_previous()
False
>>> page1.has_next()
True
>>> page2 = p.page(2)
>>> page2.object_list
['jpa', 'python']
>>> page2.has_previous()
True
>>> page2.has_next()
True
>>> page3 = p.page(3)
>>> page3.object_list
['django']
>>> page2.has_previous()
True
>>> page3.has_previous()
True
>>> page3.has_next()
False
>>> page1.previous_page_number()
Traceback (most recent call last):
  File "<console>", line 1, in <module>
  File "C:\mypython\venv\lib\site-packages\django\core\paginator.py", line 170, in previous_page_number
    return self.paginator.validate_number(self.number - 1)
  File "C:\mypython\venv\lib\site-packages\django\core\paginator.py", line 50, in validate_number
    raise EmptyPage(_('That page number is less than 1'))
django.core.paginator.EmptyPage: 페이지 번호가 1보다 작습니다.
>>> page1.next_page_number()
2
>>> page2.previous_page_number()
1
>>> page2.next_page_number()
3
>>> page3.previous_page_number()
2
>>> page3.next_page_number()
Traceback (most recent call last):
  File "<console>", line 1, in <module>
  File "C:\mypython\venv\lib\site-packages\django\core\paginator.py", line 167, in next_page_number
    return self.paginator.validate_number(self.number + 1)
  File "C:\mypython\venv\lib\site-packages\django\core\paginator.py", line 55, in validate_number
    raise EmptyPage(_('That page contains no results'))
django.core.paginator.EmptyPage: 해당 페이지에 결과가 없습니다.
>>> page1.start_index()
1
>>> page1.end_index()
2
>>> page2.start_index()
3
>>> page2.end_index()
4
>>> page3.start_index()
5
>>> page3.end_index()
5
